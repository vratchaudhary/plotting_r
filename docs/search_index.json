[["index.html", "Plotting in R using ggplot Chapter 1 Prerequisites", " Plotting in R using ggplot Vratika Chaudhary 2020-12-11 Chapter 1 Prerequisites R programming language Installed packages: pkg&lt;-c(&quot;ggplot2&quot;,&quot;ggpubr&quot;,&quot;auk&quot;,&quot;datasets&quot;,&quot;ggpubr&quot;,&quot;ggcorrplot&quot;) install.packages(pkg) "],["intro.html", "Chapter 2 Data preperation", " Chapter 2 Data preperation ##Data We can enter CSV data in R using read.csv function or read_csv function from readr package. However, for now we will use data that already exist in the datasets packages that we downloaded Lets load the library ‘datsets’ Lets look at the chickweight data head(ChickWeight) ## weight Time Chick Diet ## 1 42 0 1 1 ## 2 51 2 1 1 ## 3 59 4 1 1 ## 4 64 6 1 1 ## 5 76 8 1 1 ## 6 93 10 1 1 str(ChickWeight) ## Classes &#39;nfnGroupedData&#39;, &#39;nfGroupedData&#39;, &#39;groupedData&#39; and &#39;data.frame&#39;: 578 obs. of 4 variables: ## $ weight: num 42 51 59 64 76 93 106 125 149 171 ... ## $ Time : num 0 2 4 6 8 10 12 14 16 18 ... ## $ Chick : Ord.factor w/ 50 levels &quot;18&quot;&lt;&quot;16&quot;&lt;&quot;15&quot;&lt;..: 15 15 15 15 15 15 15 15 15 15 ... ## $ Diet : Factor w/ 4 levels &quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;: 1 1 1 1 1 1 1 1 1 1 ... ## - attr(*, &quot;formula&quot;)=Class &#39;formula&#39; language weight ~ Time | Chick ## .. ..- attr(*, &quot;.Environment&quot;)=&lt;environment: R_EmptyEnv&gt; ## - attr(*, &quot;outer&quot;)=Class &#39;formula&#39; language ~Diet ## .. ..- attr(*, &quot;.Environment&quot;)=&lt;environment: R_EmptyEnv&gt; ## - attr(*, &quot;labels&quot;)=List of 2 ## ..$ x: chr &quot;Time&quot; ## ..$ y: chr &quot;Body weight&quot; ## - attr(*, &quot;units&quot;)=List of 2 ## ..$ x: chr &quot;(days)&quot; ## ..$ y: chr &quot;(gm)&quot; ##Data manipulation with dplyr and tidyverse Let us create a column that calculates number of chicks following each type of diet Lets look at the chickweight data ChickWeight2&lt;-ChickWeight %&gt;% count(Diet) head(ChickWeight2) ## Diet n ## 1 1 220 ## 2 2 120 ## 3 3 120 ## 4 4 118 Let’s look at mean weight of chick in each diet category ChickWeight3&lt;-ChickWeight %&gt;% group_by(Diet) %&gt;% mutate(mean.wt= mean(weight)) # muatate can be used to create new columns head(ChickWeight3) ## # A tibble: 6 x 5 ## # Groups: Diet [1] ## weight Time Chick Diet mean.wt ## &lt;dbl&gt; &lt;dbl&gt; &lt;ord&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 42 0 1 1 103. ## 2 51 2 1 1 103. ## 3 59 4 1 1 103. ## 4 64 6 1 1 103. ## 5 76 8 1 1 103. ## 6 93 10 1 1 103. Let’s arrange the data in wide form, ggplot often likes the data to be in long form, that is stacked in rows. For example, here we have Diet in rows. Let’s look at some data in wide form head(relig_income) ## # A tibble: 6 x 11 ## religion `&lt;$10k` `$10-20k` `$20-30k` `$30-40k` `$40-50k` `$50-75k` `$75-100k` ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Agnostic 27 34 60 81 76 137 122 ## 2 Atheist 12 27 37 52 35 70 73 ## 3 Buddhist 27 21 30 34 33 58 62 ## 4 Catholic 418 617 732 670 638 1116 949 ## 5 Don’t k… 15 14 15 11 10 35 21 ## 6 Evangel… 575 869 1064 982 881 1486 949 ## # … with 3 more variables: `$100-150k` &lt;dbl&gt;, `&gt;150k` &lt;dbl&gt;, `Don&#39;t ## # know/refused` &lt;dbl&gt; Let’s arrange so that income is stacked in rows relig_income2&lt;-relig_income %&gt;% pivot_longer(!religion, names_to=&quot;income&quot;,values_to=&quot;count&quot;) head(relig_income2) ## # A tibble: 6 x 3 ## religion income count ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Agnostic &lt;$10k 27 ## 2 Agnostic $10-20k 34 ## 3 Agnostic $20-30k 60 ## 4 Agnostic $30-40k 81 ## 5 Agnostic $40-50k 76 ## 6 Agnostic $50-75k 137 Re-do the wide relig_income.back&lt;-relig_income2 %&gt;% pivot_wider( names_from=&quot;income&quot;,values_from=&quot;count&quot;) head(relig_income.back) ## # A tibble: 6 x 11 ## religion `&lt;$10k` `$10-20k` `$20-30k` `$30-40k` `$40-50k` `$50-75k` `$75-100k` ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Agnostic 27 34 60 81 76 137 122 ## 2 Atheist 12 27 37 52 35 70 73 ## 3 Buddhist 27 21 30 34 33 58 62 ## 4 Catholic 418 617 732 670 638 1116 949 ## 5 Don’t k… 15 14 15 11 10 35 21 ## 6 Evangel… 575 869 1064 982 881 1486 949 ## # … with 3 more variables: `$100-150k` &lt;dbl&gt;, `&gt;150k` &lt;dbl&gt;, `Don&#39;t ## # know/refused` &lt;dbl&gt; "],["introduction-to-ggplot2.html", "Chapter 3 Introduction to ggplot2 3.1 Creating the building blocks of the graph 3.2 Adding geom_objects 3.3 Making the plot visually more appealing 3.4 Let’s make the plot colorful 3.5 Change label fonts, color, angle etc 3.6 You can also create and save a theme for entire project 3.7 Changing colors manually and add error bars", " Chapter 3 Introduction to ggplot2 The package ggplot2 is extremely functional and useful. It created graphs in layers and therefore is very intutive. It adds layers on top of each other 3.1 Creating the building blocks of the graph ggplot(data = dataname, mapping= aes(x=xaxis, y= yaxis)) ggplot function from ggplot2 package requires two arguments: data is the object name you gave to your data sets Mapping is the specifications of the variables we want to visualize and are places withing the ‘aes’ function short for aesthetics. Let’s bring back the chick data and let’s look how chicks have grown over time library(ggplot2) par(mar = c(4, 4, .1, .1)) ggplot(data=ChickWeight, mapping=aes(x=Time, y=weight)) Figure 3.1: Building block We see a box, and we see the correct axis but we don’t see anything else- why? 3.2 Adding geom_objects Because yes we told ggplot what variables we want to plot, but we haven’t told it what type of plot we want. We can do this by adding a ‘geom_object’. For this purpose, let’s make a line plot. We can do so by adding a ‘geom_line’ object to the previous layer. We join the two layers by a ‘+’ sign. library(ggplot2) ggplot(ChickWeight, mapping= aes(x=Time, y=weight))+ geom_line() Figure 3.2: Line plot Hey! We got some lines, but it looks weird!!! That is becasue we plotted all the data together, we had 48 chicks but we plotted all of them in the same plot. So let’s make them distinct. We can simply do so by giving a distinct line to each chick by adding group library(ggplot2) ggplot(ChickWeight, aes(x=Time, y=weight, group=Chick))+ geom_line() Figure 3.3: Line plot with colors 3.3 Making the plot visually more appealing Let’s do the following: 1. Increase the size of the lines 2. Lighten the background using the theme function in ggplot2 3. Increase the size of axis text and titles 4. Change y axis label library(ggplot2) ggplot(ChickWeight, aes(x=Time, y=weight, group=Chick),size=2)+ geom_line()+ theme_minimal(base_size = 20)+ ylab(&quot;Weight&quot;) Figure 3.4: Better looking line plot with groups 3.4 Let’s make the plot colorful ggplot(ChickWeight, aes(x=Time, y=weight, color=Chick),size=2)+ geom_line()+ theme_minimal(base_size = 20)+ ylab(&quot;Weight&quot;) Figure 3.5: Better looking line plot with colors 3.5 Change label fonts, color, angle etc ggplot(ChickWeight, aes(x=Time, y=weight, color=Chick),size=2)+ geom_line()+ theme_minimal(base_size = 20)+ ylab(&quot;Weight&quot;)+theme(axis.title.x = element_text( angle=40,vjust=0.2,color=&#39;blue&#39;,family=&quot;Comic Sans MS&quot;))+ theme(axis.title.y = element_text( color=&#39;purple&#39;,family=&quot;serif&quot;)) Figure 3.6: change label font 3.6 You can also create and save a theme for entire project theme_set&lt;-function(){ theme_bw(base_size = 20)+ theme(axis.text.x = element_text(angle=35,vjust=0.8,color=&#39;green&#39;))+ theme(legend.title = element_blank())} ggplot(ChickWeight, aes(x=Time, y=weight, color=Chick),size=2)+ geom_line()+theme_set() Figure 3.7: change label font 3.7 Changing colors manually and add error bars Lets plot the mean chick weight over time for each type of diet ChickWeight %&gt;% group_by(Diet,Time) %&gt;% mutate(mean.wt=mean(weight), se.weight= (sd(weight)) / sqrt((length(weight)))) %&gt;% ggplot() + geom_line(aes(x=Time, y=mean.wt, color=Diet,lty=Diet),size=2)+ geom_ribbon(aes(x=Time, ymax=mean.wt+se.weight,ymin= mean.wt-se.weight,group=Diet,fill=Diet),size=2,alpha=0.2)+ scale_color_manual(values=c(&quot;cyan1&quot;,&quot;cyan4&quot;,&quot;green&quot;,&quot;orange&quot;))+ scale_fill_manual(values=c(&quot;cyan1&quot;,&quot;cyan4&quot;,&quot;green&quot;,&quot;orange&quot;))+ ggpubr::theme_pubr(base_size = 20)+ ylab(&quot;Mean weight&quot;) Figure 3.8: change label font "],["plotting-using-one-variable-at-a-time.html", "Chapter 4 Plotting using one variable at a time 4.1 Histograms- plots the distribution of a numerical variable 4.2 Bar plots 4.3 Ordering based on number of counts from lowest to highest 4.4 Adding percentages 4.5 pie chart", " Chapter 4 Plotting using one variable at a time 4.1 Histograms- plots the distribution of a numerical variable Note the customizations of the histogram: 1. we colored the bars pretty 2. ‘alpha’ adds transparency to the object, useful when you have overlapping objects, goes from 0 (transparent) to 1 (opaque) library(ggplot2) ggplot(ChickWeight, aes(weight))+ geom_histogram(fill=&#39;cyan4&#39;,color=&#39;black&#39;,alpha=0.5)+ theme_minimal(base_size = 20)+ ylab(&quot;Frequency&quot;)+ xlab(&quot;Weight (g)&quot;) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. Figure 4.1: Histogram Improving ‘binwidth’ value, it is the number of categories data is divided into and usually defaults to 30, but we can go up and down, let’s go to 50 here library(ggplot2) ggplot(ChickWeight, aes(weight))+ geom_histogram(fill=&#39;cyan4&#39;,color=&#39;black&#39;,alpha=0.5, binwidth = 50)+ theme_minimal(base_size = 20)+ ylab(&quot;Frequency&quot;)+ xlab(&quot;Weight (g)&quot;) Figure 4.2: Histogram 4.2 Bar plots Plot the distribution of a categorical variable Here we will plot number of chicks following a particular diet. library(ggplot2) ggplot(ChickWeight, aes(x= Diet))+ geom_bar(color=&#39;orange&#39;, fill=&#39;lavender&#39;)+ theme_minimal(base_size = 20)+ ylab(&quot;Count&quot;)+ xlab(&quot;Diet&quot;) Figure 4.3: Bar plot 4.3 Ordering based on number of counts from lowest to highest Let’s bring the magic of dplyer to do so So we reorganize the data to calcualte number of chicks on each diet type library(tidyverse) reord.chick&lt;-ChickWeight %&gt;% count(Diet) %&gt;% arrange(n) reord.chick ## Diet n ## 1 4 118 ## 2 2 120 ## 3 3 120 ## 4 1 220 Here we plot using geom_col function where heights represents the value of the data and requires y aesthetics. We can use geom_text function to add the label to each column and use vjust to move the labels up and down library(ggplot2) ggplot(reord.chick, aes(x= reorder(Diet,n), y=n))+ geom_col(color=&#39;orange&#39;, fill=&#39;lavender&#39;)+ geom_text(aes(label=n), vjust=-0.7)+ theme_minimal(base_size = 20)+ ylab(&quot;Count&quot;)+ xlab(&quot;Diet&quot;) Figure 4.4: Bar plot with labels 4.4 Adding percentages Here we also get more adventerous with data wrangling and create new columns and plot them within the same pipe ChickWeight %&gt;% count(Diet) %&gt;% arrange(n) %&gt;% mutate(percent = n / sum(n), percentlabel = paste0(round(percent*100), &quot;%&quot;)) %&gt;% ggplot( aes(x= reorder(Diet,percent), y=percent))+ geom_col(color=&#39;orange&#39;, fill=&#39;lavender&#39;)+ geom_text(aes(label=percentlabel), vjust=-0.7)+ theme_minimal(base_size = 20)+ ylab(&quot;Count&quot;)+ xlab(&quot;Diet&quot;) Figure 4.5: Bar plot with percent labels 4.5 pie chart library(ggplot2) ggplot(reord.chick, aes(x= reorder(Diet,n), y=n,fill=Diet))+ geom_col(width = 1, stat = &quot;identity&quot;, color = &quot;black&quot;) + geom_text(aes(label=n), vjust=-0.7)+ theme_minimal(base_size = 20)+ coord_polar(&quot;y&quot;, start = 0,direction = -1 ) + theme_void() + ylab(&quot;Count&quot;)+ xlab(&quot;Diet&quot;) ## Warning: Ignoring unknown parameters: stat Figure 4.6: Pie chart with labels "],["multivariate-plotting.html", "Chapter 5 Multivariate plotting 5.1 Bar plot with categories, plot depth by cut 5.2 Bar plot with categories, side by side 5.3 Segemented bar plot, appealing viz 5.4 Scatter plot 5.5 Grouping using facets 5.6 Change facet labels", " Chapter 5 Multivariate plotting Now we will plot using multiple variables Let’s use diamond dataset from tidyr data(&quot;diamonds&quot;) head(diamonds) ## # A tibble: 6 x 10 ## carat cut color clarity depth table price x y z ## &lt;dbl&gt; &lt;ord&gt; &lt;ord&gt; &lt;ord&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0.23 Ideal E SI2 61.5 55 326 3.95 3.98 2.43 ## 2 0.21 Premium E SI1 59.8 61 326 3.89 3.84 2.31 ## 3 0.23 Good E VS1 56.9 65 327 4.05 4.07 2.31 ## 4 0.290 Premium I VS2 62.4 58 334 4.2 4.23 2.63 ## 5 0.31 Good J SI2 63.3 58 335 4.34 4.35 2.75 ## 6 0.24 Very Good J VVS2 62.8 57 336 3.94 3.96 2.48 5.1 Bar plot with categories, plot depth by cut ggplot(diamonds)+ geom_bar(aes(x= cut, fill=color))+ theme_minimal(base_size = 20)+ ylab(&quot;Count&quot;)+ xlab(&quot;Cut&quot;) Figure 5.1: Bar plot with grouping 5.2 Bar plot with categories, side by side ggplot(diamonds)+ geom_bar(aes(x= cut, fill=color),position = position_dodge())+ theme_minimal(base_size = 20)+ ylab(&quot;Count&quot;)+ xlab(&quot;Cut&quot;)+ scale_x_discrete(guide = guide_axis(n.dodge = 2)) # when the axis text are overlapping, this can help Figure 5.2: Bar plot with grouping 5.3 Segemented bar plot, appealing viz diamonds %&gt;% group_by(cut, color) %&gt;% summarize(n = n()) %&gt;% mutate(prct = n/sum(n), label = scales::percent(prct)) %&gt;% ggplot()+ geom_col(aes(x=cut,y=prct,fill=color),position=&#39;fill&#39;)+ geom_text(aes(x=cut,y=prct,label = label), size = 3, color=&#39;white&#39;, position = position_stack(vjust = 0.5)) + theme_minimal(base_size = 20)+ ylab(&quot;Percentage&quot;)+ xlab(&quot;Cut&quot;) ## `summarise()` regrouping output by &#39;cut&#39; (override with `.groups` argument) Figure 5.3: Bar plot with segments 5.4 Scatter plot ggplot(diamonds)+ geom_point(aes(x=carat,y=price,color=color))+ theme_bw()+ xlab(&quot;Carat&quot;)+ ylab(&quot;Price&quot;) Figure 5.4: Scatter plot with grouping Let’s see if the Carat is related to price ggplot(diamonds)+ geom_point(aes(x=carat,y=price,color=color))+ geom_smooth(aes(x=carat,y=price,color=color),method=&#39;lm&#39;)+ theme_bw()+ ylab(&quot;Carat&quot;)+ xlab(&quot;Price&quot;) ## `geom_smooth()` using formula &#39;y ~ x&#39; Figure 5.5: Scatter plot with grouping and smooth line 5.5 Grouping using facets ggplot(diamonds)+ geom_point(aes(x=carat,y=price))+ geom_smooth(aes(x=carat,y=price),method=&#39;lm&#39;)+ facet_wrap(~color)+ theme_bw()+ ylab(&quot;Carat&quot;)+ xlab(&quot;Price&quot;) ## `geom_smooth()` using formula &#39;y ~ x&#39; Figure 5.6: Scatter plot with facets and smooth line 5.6 Change facet labels diamonds2&lt;-diamonds levels(diamonds2$color) ## [1] &quot;D&quot; &quot;E&quot; &quot;F&quot; &quot;G&quot; &quot;H&quot; &quot;I&quot; &quot;J&quot; diamonds2$color&lt;- factor(diamonds2$color, levels =c(&quot;D&quot; ,&quot;E&quot; ,&quot;F&quot; ,&quot;G&quot;, &quot;H&quot;, &quot;I&quot;, &quot;J&quot;), labels=c(&quot;Red&quot;,&quot;Blue&quot;,&quot;Orange&quot;,&quot;Pink&quot;,&quot;Indigo&quot;,&quot;Jade&quot;,&quot;Orange&quot;)) ggplot(diamonds2)+ geom_point(aes(x=carat,y=price))+ geom_smooth(aes(x=carat,y=price),method=&#39;lm&#39;)+ facet_wrap(~color)+ theme_bw()+ ylab(&quot;Carat&quot;)+ xlab(&quot;Price&quot;) ## `geom_smooth()` using formula &#39;y ~ x&#39; Figure 5.7: Scatter plot with facets and different labels "],["publication-style-figures-and-saving.html", "Chapter 6 Publication style figures and saving", " Chapter 6 Publication style figures and saving ‘ggpubr’ package is wondeful to create publication quality figures diamonds2&lt;-diamonds levels(diamonds2$color) ## [1] &quot;D&quot; &quot;E&quot; &quot;F&quot; &quot;G&quot; &quot;H&quot; &quot;I&quot; &quot;J&quot; diamonds2$color&lt;- factor(diamonds2$color, levels =c(&quot;D&quot; ,&quot;E&quot; ,&quot;F&quot; ,&quot;G&quot;, &quot;H&quot;, &quot;I&quot;, &quot;J&quot;), labels=c(&quot;Red&quot;,&quot;Blue&quot;,&quot;Orange&quot;,&quot;Pink&quot;,&quot;Indigo&quot;,&quot;Jade&quot;,&quot;Orange&quot;)) ggplot(diamonds2)+ geom_point(aes(x=carat,y=price))+ geom_smooth(aes(x=carat,y=price),method=&#39;lm&#39;)+ facet_wrap(~color)+ ggpubr::theme_pubr(base_size=22)+ ylab(&quot;Carat&quot;)+ xlab(&quot;Price&quot;) ## `geom_smooth()` using formula &#39;y ~ x&#39; Figure 6.1: Scatter plot with facets pub quality ##Correlation plot diamonds2&lt;-diamonds %&gt;% select(depth,table, price,carat) # calulate the correlations c &lt;- cor(diamonds2, use=&quot;complete.obs&quot;) library(ggcorrplot) ggcorrplot(c,lab=T, color=c(&quot;green&quot;,&quot;black&quot;,&quot;orange&quot;)) Figure 6.2: Correlation plot "],["references.html", "References", " References "]]
